---
import DefaultLayout from '@layouts/DefaultLayout.astro'
import PageHeader from '@components/PageHeader.astro'
import { Badge, Card, Heading, Link, Pagination } from 'accessible-astro-components'
import { getCollection } from 'astro:content'
import type { GetStaticPaths, Page } from 'astro'
import type { CollectionEntry } from 'astro:content'
import { slugify } from '@/utils/slugify'

// Thumbs (optional fallbacks)
import postImage1 from '@assets/images/posts/post-image-1.png'
import postImage2 from '@assets/images/posts/post-image-2.png'
import postImage3 from '@assets/images/posts/post-image-3.png'
import postImage4 from '@assets/images/posts/post-image-4.png'
import postImage5 from '@assets/images/posts/post-image-5.png'
import postImage6 from '@assets/images/posts/post-image-6.png'

export const getStaticPaths = (async ({ paginate }) => {
  const posts = await getCollection('blog')

  // Tags
  const allTags = posts.map((p) => p.data.tags ?? []).flat()
  const uniqueTagLabels = [...new Set(allTags)].sort((a, b) => a.localeCompare(b))
  const uniqueTags = uniqueTagLabels.map((label) => ({ label, slug: slugify(label) }))

  // Newest first
  const sorted = posts.sort(
    (a, b) => (b.data.pubDate?.valueOf?.() ?? 0) - (a.data.pubDate?.valueOf?.() ?? 0)
  )

  // Add fallback images for cards
  const thumbs = [postImage1, postImage2, postImage3, postImage4, postImage5, postImage6]
  const withImages = sorted.map((entry, idx) => ({
    ...entry,
    featuredImage: thumbs[idx % thumbs.length],
  }))

  return paginate(withImages, {
    pageSize: 6,
    props: { uniqueTags },
  })
}) satisfies GetStaticPaths

interface Props {
  page: Page<CollectionEntry<'blog'> & { featuredImage: any }>
  uniqueTags: { label: string; slug: string }[]
}

const { page, uniqueTags } = Astro.props
---

<DefaultLayout title="Blog" description="Posts powered by Astro Content Collections (glob loader).">
  <PageHeader
    title="Blog"
    subtitle='Posts from <code>src/content/blog</code>. Pagination is generated at build time.'
    bgType="bordered"
  />

  <section class="my-12">
    <div class="container">
      {uniqueTags.length ? (
        <>
          <Heading level="h2" size="h5" class="mb-2">Tags</Heading>
          <div class="flex flex-wrap gap-4">
            {uniqueTags.map((t) => (
              <Link href={'/blog/tag/' + t.slug}>{t.label}</Link>
            ))}
          </div>
        </>
      ) : null}

      {page.total === 0 ? (
        <p class="mt-8 text-sm"><em>No posts yet. Add files in <code>src/content/blog</code>.</em></p>
      ) : (
        <>
          <p class="mt-8 text-sm"><em>Post {page.start + 1} through {page.end + 1} of {page.total} total posts</em></p>
          <ul class="mt-3 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
            {page.data.map((entry) => (
              <li>
                <Card
                  imageComponent={entry.featuredImage}
                  url={'/blog/' + entry.id}             {/* <-- use id, not slug */}
                  title={entry.data.title}
                  headingLevel="h2"
                  footer={[
                    entry.data.author ?? null,
                    entry.data.pubDate ? new Date(entry.data.pubDate).toDateString() : null
                  ].filter(Boolean).join(' • ')}
                  fullHeight={true}
                >
                  <span slot="meta">
                    {(entry.data.tags ?? []).map((tag) => <Badge>{tag}</Badge>)}
                  </span>
                  {entry.data.description ?? 'Read more →'}
                </Card>
              </li>
            ))}
          </ul>

          {page.lastPage > 1 && (
            <div class="mt-12 grid place-content-center">
              <Pagination
                firstPage={page.url.prev ? '/blog' : null}
                previousPage={page.url.prev ? page.url.prev : null}
                nextPage={page.url.next ? page.url.next : null}
                lastPage={page.url.next ? `/blog/${page.lastPage}` : null}
                currentPage={`${page.currentPage}`}
                totalPages={`${page.lastPage}`}
                ariaLabel="Blog pagination"
              />
            </div>
          )}
        </>
      )}
    </div>
  </section>
</DefaultLayout>
